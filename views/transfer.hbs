<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Перевод средств</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .transfer-container {
      max-width: 800px;
      margin: 30px auto;
      padding: 25px;
      border-radius: 10px;
      box-shadow: 0 2px 15px rgba(0,0,0,0.1);
    }
    .converter-card {
      background-color: #f8f9fa;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 25px;
      border-left: 4px solid #0d6efd;
    }
    .conversion-result {
      font-size: 1.2rem;
      font-weight: 600;
      color: #198754;
      margin-top: 15px;
    }
    .rate-info {
      font-size: 0.9rem;
      color: #6c757d;
    }
    .commission-info {
      color: #dc3545;
      font-size: 0.9rem;
    }
    #phoneInput {
      direction: ltr;
      text-align: left;
    }
    .currency-selector {
      max-width: 150px;
    }
    .real-time-result {
      transition: all 0.3s ease;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="transfer-container">
      <h2 class="text-center mb-4">Перевод средств</h2>
      
      <div class="converter-card">
        <h5>Конвертер валют</h5>
        <p class="text-muted mb-3">Укажите сумму и выберите валюту для перевода</p>
        
        <div class="row g-3 align-items-end">
          <div class="col-md-6">
            <label class="form-label">Я хочу перевести</label>
            <div class="input-group">
              <input type="number" class="form-control" id="sourceAmount" value="1000" min="0.01" step="0.01">
              <select class="form-select currency-selector" id="sourceCurrency">
                <option value="RUB">RUB</option>
                <option value="USD">USD</option>
                <option value="EUR">EUR</option>
              </select>
            </div>
          </div>
          
          <div class="col-md-6">
            <label class="form-label">Получатель получит</label>
            <div class="input-group">
              <input type="text" class="form-control real-time-result" id="targetAmount" readonly>
              <select class="form-select currency-selector" id="targetCurrency">
                <option value="USD">USD</option>
                <option value="EUR">EUR</option>
                <option value="RUB">RUB</option>
              </select>
            </div>
          </div>
        </div>
        
        <div class="mt-3">
          <div class="rate-info" id="rateInfo">1 RUB = 0.011 USD</div>
          <div class="commission-info">Включая комиссию 1% за конвертацию</div>
        </div>
      </div>
      
      <div id="message" class="alert" style="display: none;"></div>
      
      <form id="transferForm">
        <input type="hidden" name="_csrf" value="{{csrfToken}}">
        
        <div class="mb-3">
          <label class="form-label fw-bold">С вашего счёта:</label>
          <select class="form-select" id="fromAccountId" name="fromAccountId" required>
            {{#each user.accounts}}
              <option value="{{this._id}}" data-currency="{{this.currency}}" data-balance="{{this.balance}}">
                {{this.accountNumber}} ({{this.balance}} {{this.currency}})
              </option>
            {{/each}}
          </select>
          <small class="text-muted" id="balanceInfo">
            Доступно: {{user.accounts.[0].balance}} {{user.accounts.[0].currency}}
          </small>
        </div>

        <div class="mb-3">
          <label class="form-label fw-bold">Номер телефона получателя:</label>
          <div class="input-group">
            <span class="input-group-text">+7</span>
            <input type="tel" class="form-control" id="phoneInput" name="phoneNumber" 
                   placeholder="XXX-XXX-XXXX" pattern="[0-9]{10}" required>
          </div>
          <div class="invalid-feedback" id="phoneFeedback"></div>
        </div>

        <div class="mb-3">
          <label for="amount" class="form-label fw-bold">Сумма перевода:</label>
          <div class="input-group">
            <input type="number" class="form-control" id="amount" 
                   name="amount" min="0.01" step="0.01" required>
            <span class="input-group-text" id="currencySymbol">{{user.fromAccountCurrency}}</span>
          </div>
          <div class="invalid-feedback" id="amountFeedback"></div>
        </div>

        <div id="conversionInfo" style="display: none;">
          <div class="conversion-result" id="convertedAmountText"></div>
          <div class="rate-info" id="exchangeRateText"></div>
        </div>

        <div class="form-check mb-3">
          <input class="form-check-input" type="checkbox" id="confirmationCheck" required>
          <label class="form-check-label" for="confirmationCheck">Подтверждаю перевод</label>
        </div>

        <div class="d-grid gap-2">
          <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">Перевести</button>
          <a href="/main/home" class="btn btn-outline-secondary">Отмена</a>
        </div>
      </form>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const sourceAmount = document.getElementById('sourceAmount');
      const sourceCurrency = document.getElementById('sourceCurrency');
      const targetAmount = document.getElementById('targetAmount');
      const targetCurrency = document.getElementById('targetCurrency');
      const rateInfo = document.getElementById('rateInfo');
      
      const form = document.getElementById('transferForm');
      const fromAccountSelect = document.getElementById('fromAccountId');
      const amountInput = document.getElementById('amount');
      const currencySymbol = document.getElementById('currencySymbol');
      const phoneInput = document.getElementById('phoneInput');
      const conversionInfo = document.getElementById('conversionInfo');
      const convertedAmountText = document.getElementById('convertedAmountText');
      const exchangeRateText = document.getElementById('exchangeRateText');
      const submitBtn = document.getElementById('submitBtn');

      let currentRate = 1;
      let currentFromCurrency = 'RUB';
      let currentToCurrency = 'USD';

      initConverter();

      function initConverter() {
        sourceAmount.addEventListener('input', updateConversion);
        sourceCurrency.addEventListener('change', updateConversion);
        targetCurrency.addEventListener('change', updateConversion);
        
        updateConversion();
        
        sourceAmount.addEventListener('change', updateTransferForm);
        sourceCurrency.addEventListener('change', updateTransferForm);
      }

      async function updateConversion() {
        const amount = parseFloat(sourceAmount.value) || 0;
        const fromCurrency = sourceCurrency.value;
        const toCurrency = targetCurrency.value;
        
        if (fromCurrency === toCurrency) {
          targetAmount.value = amount.toFixed(2);
          rateInfo.textContent = `1 ${fromCurrency} = 1 ${toCurrency}`;
          currentRate = 1;
          return;
        }

        try {
          const rate = await getExchangeRate(fromCurrency, toCurrency);
          currentRate = rate;
          
          const result = (amount * rate * 0.99).toFixed(2);
          
          targetAmount.value = result;
          rateInfo.textContent = `1 ${fromCurrency} = ${rate.toFixed(4)} ${toCurrency}`;
          
          currentFromCurrency = fromCurrency;
          currentToCurrency = toCurrency;
        } catch (error) {
          console.error('Ошибка конвертации:', error);
          targetAmount.value = 'Ошибка';
          rateInfo.textContent = 'Не удалось получить курс валют';
        }
      }

      function updateTransferForm() {
        amountInput.value = sourceAmount.value;
        currencySymbol.textContent = sourceCurrency.value;
      }

      async function getExchangeRate(fromCurrency, toCurrency) {
        try {
          const response = await fetch(`/main/exchange-rate?from=${fromCurrency}&to=${toCurrency}`);
          if (!response.ok) throw new Error('Не удалось получить курс');
          const data = await response.json();
          return data.rate;
        } catch (error) {
          console.error('Ошибка при получении курса:', error);
          throw error;
        }
      }

      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!validateForm()) return;
        
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Перевод...';
        
        try {
          const response = await fetch('/main/transfer-by-phone', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              fromAccountId: fromAccountSelect.value,
              phoneNumber: '+7' + phoneInput.value,
              amount: parseFloat(amountInput.value)
            }),
            credentials: 'include'
          });
          
          const result = await response.json();
          
          if (!response.ok) {
            throw new Error(result.error || 'Ошибка при переводе');
          }
          
          showMessage(result.message, 'alert-success');
          
          updateAccountBalance(result.fromAccount.balance);
          
          resetForm();
        } catch (error) {
          console.error('Ошибка перевода:', error);
          showMessage(error.message, 'alert-danger');
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = 'Перевести';
        }
      });

      function validateForm() {
        let isValid = true;
        
        const amount = parseFloat(amountInput.value);
        if (isNaN(amount) || amount <= 0) {
          document.getElementById('amountFeedback').textContent = 'Введите корректную сумму';
          amountInput.classList.add('is-invalid');
          isValid = false;
        } else {
          amountInput.classList.remove('is-invalid');
        }
        
        const phoneRegex = /^[0-9]{10}$/;
        if (!phoneRegex.test(phoneInput.value)) {
          document.getElementById('phoneFeedback').textContent = 'Введите 10 цифр номера телефона';
          phoneInput.classList.add('is-invalid');
          isValid = false;
        } else {
          phoneInput.classList.remove('is-invalid');
        }
        
        return isValid;
      }

      function updateAccountBalance(newBalance) {
        const selectedOption = fromAccountSelect.options[fromAccountSelect.selectedIndex];
        const currency = selectedOption.dataset.currency;
        selectedOption.dataset.balance = newBalance;
        selectedOption.text = `${selectedOption.text.split(' (')[0]} (${newBalance} ${currency})`;
        balanceInfo.textContent = `Доступно: ${newBalance} ${currency}`;
      }

      function resetForm() {
        amountInput.value = '';
        phoneInput.value = '';
        document.getElementById('confirmationCheck').checked = false;
        conversionInfo.style.display = 'none';
      }

      function showMessage(text, alertClass) {
        const messageEl = document.getElementById('message');
        messageEl.textContent = text;
        messageEl.className = `alert ${alertClass}`;
        messageEl.style.display = 'block';
      }
    });
  </script>
</body>
</html>